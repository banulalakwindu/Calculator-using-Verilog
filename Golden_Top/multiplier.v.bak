module multiplier( input [7:0]A,input [7:0]B,output [15:0]c_out, output v);
	wire [7:0] w0;//B0
	wire [7:0] w1;//B1
	wire [7:0] w2;//B2
	wire [7:0] w3;//B3
	wire [7:0] w4;//B4
	wire [7:0] w5;//B5
	wire [7:0] w6;//B6
	wire [7:0] w7;//B7
	
	wire [7:0] y0;
	wire [7:0] y1;
	wire [7:0] y2;
	wire [7:0] y3;
	wire [7:0] y4;
	wire [7:0] y5;
	wire [7:0] y6;
	wire [0:6] carry;
	
	and (w0[0],A[0],B[0]);
	and (w0[1],A[1],B[0]);
	and (w0[2],A[2],B[0]);
	and (w0[3],A[3],B[0]);
	and (w0[4],A[4],B[0]);
	and (w0[5],A[5],B[0]);
	and (w0[6],A[6],B[0]);
	and (w0[7],A[7],B[0]);
	
	
	and (w1[0],A[0],B[1]);
	and (w1[1],A[1],B[1]);
	and (w1[2],A[2],B[1]);
	and (w1[3],A[3],B[1]);
	and (w1[4],A[4],B[1]);
	and (w1[5],A[5],B[1]);
	and (w1[6],A[6],B[1]);
	and (w1[7],A[7],B[1]);

	// frist out come.final bit
	assign c_out[0] = w0[0];
	assign carry[0] = 0;
	//eight_bit_full_adder ( [7:0]i,[7:0]j, carryin , carryout,[7:0]s);
	eight_bit_full_adder adder0(w0[7:1],w1[7:0],carry[0],carry[1],y0[7:0]);
	
	// second final bit								
	assign c_out[1] = y0[0];
	
	and (w2[0],A[0],B[2]);
	and (w2[1],A[1],B[2]);
	and (w2[2],A[2],B[2]);
	and (w2[3],A[3],B[2]);
	and (w2[4],A[4],B[2]);
	and (w2[5],A[5],B[2]);
	and (w2[6],A[6],B[2]);
	and (w2[7],A[7],B[2]);
	
	
	eight_bit_full_adder adder1(y0[7:1],w2[7:0],carry[1],carry[2],y1[7:0]);
		
	assign c_out[2] = y1[0];
		
	and (w3[0],A[0],B[3]);
	and (w3[1],A[1],B[3]);
	and (w3[2],A[2],B[3]);
	and (w3[3],A[3],B[3]);
	and (w3[4],A[4],B[3]);
	and (w3[5],A[5],B[3]);
	and (w3[6],A[6],B[3]);
	and (w3[7],A[7],B[3]);
	
	eight_bit_full_adder adde2(y1[7:1],w3[7:0],carry[2],carry[3],y2[7:0]);
	
	assign c_out[3] = y2[0];
		
		
	and (w4[0],A[0],B[4]);
	and (w4[1],A[1],B[4]);
	and (w4[2],A[2],B[4]);
	and (w4[3],A[3],B[4]);
	and (w4[4],A[4],B[4]);
	and (w4[5],A[5],B[4]);
	and (w4[6],A[6],B[4]);
	and (w4[7],A[7],B[4]);
	
	eight_bit_full_adder adde3(y2[7:1],w4[7:0],carry[3],carry[4],y3[7:0]);		
	
	assign c_out[4] = y3[0];
		
		
	and (w5[0],A[0],B[5]);
	and (w5[1],A[1],B[5]);
	and (w5[2],A[2],B[5]);
	and (w5[3],A[3],B[5]);
	and (w5[4],A[4],B[5]);
	and (w5[5],A[5],B[5]);
	and (w5[6],A[6],B[5]);
	and (w5[7],A[7],B[5]);
	
	eight_bit_full_adder adde2(y3[7:1],w5[7:0],carry[4],carry[5],y4[7:0]);
		
	assign c_out[5] = y4[0];
		
	
	and (w6[0],A[0],B[6]);
	and (w6[1],A[1],B[6]);
	and (w6[2],A[2],B[6]);
	and (w6[3],A[3],B[6]);
	and (w6[4],A[4],B[6]);
	and (w6[5],A[5],B[6]);
	and (w6[6],A[6],B[6]);
	and (w6[7],A[7],B[6]);
	
	eight_bit_full_adder adde2(y4[7:1],w6[7:0],carry[5],carry[6],y5[7:0]);
		
		assign c_out[6] = y5[0];
		
		
	and (w7[0],A[0],B[7]);
	and (w7[1],A[1],B[7]);
	and (w7[2],A[2],B[7]);
	and (w7[3],A[3],B[7]);
	and (w7[4],A[4],B[7]);
	and (w7[5],A[5],B[7]);
	and (w7[6],A[6],B[7]);
	and (w7[7],A[7],B[7]);
	
	eight_bit_full_adder adde2(y5[7:1],w7[7:0],carry[6],carry[7],y6[7:0]);
		
	assign c_out[7] = y6[0];
	assign c_out[8] = y6[1];
	assign c_out[9] = y6[2];
	assign c_out[10] = y6[3];	
	assign c_out[11] = y6[4];
	assign c_out[12] = y6[5];
	assign c_out[13] = y6[6];
	assign c_out[14] = y6[7];
	assign c_out[15] = carry[7];

endmodule 